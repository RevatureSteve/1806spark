package com.revature.service;

import java.util.List;

import com.revature.dao.UserDao;
import com.revature.dao.UserDaoImpli;
import com.revature.domain.Task;
import com.revature.domain.User;

public class AppService {
	
	/*
	 * business logic like login validation:
	 * 
	 * 		- validation models before persisting
	 * 		- manipulate models before persisting
	 * 		- validate user before pulling sensitive data
	 * 		- etc...
	 */

	private UserDao userDao = new UserDaoImpli();
	/**
	 * login() returns a valid user object or return null if the user/pw combo is invalid
	 * @param userInput
	 * @return
	 */
	public User login(User userInput) {
		// First pass the userInput's username to the dao to see if there is a 
		//  	-is a record found in the database with that username
		//		-Yes - reassign the user record to a User java object
		//		-No - then it is null;
		User dbUser = userDao.getUserByUsername(userInput.getUsername());
		
		// since the username might not be found I could get null back...check for that!
		if(dbUser != null) {		
			// now let's compare the userInput password to the dbUser's password
		if (dbUser.getPassword().equals(userInput.getPassword())) {
			return dbUser; // not userInput since it does have the userId
		}
			
	}
		return null;
	}
		public List<Task> getAllTasks(){
			System.out.println("[LOG]-----retrieving----All Tasks");
			//any validation before asking the db? maybe 
			return userDao.getAllTasks();
			
		}
		
		
		public User getUser(int id) {
			
			return null;
}
		public int createUser(User user) {
		//userdao.getUserByUsername (username)
			return 0;
		}
}
