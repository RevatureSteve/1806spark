package com.banking.daoIMP;



import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.banking.dao.BankAccountDao;
import com.banking.pojo.BankAccountJB;
import com.banking.presentation.Account;


public class AccountImpl implements BankAccountDao {
	private final static String USERNAME = "bank_db";
	private final static String PASSWORD = "p4ssw0rd";
	private final static String URL = "jdbc:blackcat.cob89bumroku.us-east-2.rds.amazonaws.com" + ":1521:ORCL";
	
	
	/*
	 * 	 Why use a preparedStatement over a statement?
	 * 		-poor readability of a statement
	 * 	 "INSERT with variables of a statement:  VALUES('" + fc.getFcQuestion() +','+ fc.getFcAnswer()+"')";
	 * 		-statement can have SQL Injections while preparedStatement prevents them better
	 * 		Why is that? preparedStatement precompiles the SQL String without the user input, looks for SQL Keywords
	 * 				will only ever execute those keyword regardless of the what the user enters
	 */
	//CREATE 
	@Override
	public int createBankAccount(BankAccountJB ba) {
		int rowsAffected = 0;
		try (Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);) {
			/*
			 * 	 need to stop autocommit to run multiple sql statements as a single tx?
			 */
			conn.setAutoCommit(false);
			
			String sql = "INSERT INTO bankaccount(account#, name, balance) VALUES (?,?,?)";
//			Statement statement = conn.createStatement(); notice that statement doesn't take a SQL argument while preparedStatement does!
			PreparedStatement ps = conn.prepareStatement(sql); // take in the SQL statement without variable first, use ? instead!
			// After setting your SQL statement we now need to register the parameters of the SQL Statement
			// however many ? you have, you need a ps.set method for each one
			ps.setInt(1, ba.getBankAccountNumber()); // what is the datatype of the 1st ?...that is String for the Question, and it is the 1st ?
			ps.setString(2, ba.getCustomerName()); // again 2 is the ? number, the 2nd argument is the value 
			ps.setDouble(3, ba.getBalance());
			rowsAffected = ps.executeUpdate();
			conn.commit(); // if you setAutoCommit(false); you must use the commit() on the connection
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return rowsAffected;
	}
	
	@Override
	public void createBankAccountProc(BankAccountJB ba) {
		try (Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);) {
			String sql = "{call insert_fc_procedure(?, ?, ?)}"; // surround { }, it works without but nothing gets returned..
			//String msg = ""; DO I NEED THIS?
			CallableStatement cs = conn.prepareCall(sql);
			cs.setInt(1, ba.getBankAccountNumber());
			cs.setString(2, ba.getCustomerName());
			cs.setDouble(3, ba.getBalance());
			int rowsAffected = cs.executeUpdate();
			System.out.println("rows afftected: " + rowsAffected);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// READ
	@Override
	public List<BankAccountJB> getAllAccounts() {
		// Get a Connection to the OracleDB
		// Use the DriverManager
		List<BankAccountJB> myBankAccounts = new ArrayList<>();
		try (Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);) {
			String sql = "SELECT * FROM flash_cards";
			Statement statement = conn.createStatement();
			ResultSet rs = statement.executeQuery(sql);

			// loop through the resultset of  records
			while (rs.next()) {
				/*
				 * getInt(column Index) or getInt(column label)
				 */
				BankAccountJB ba = new BankAccountJB(rs.getInt(1), rs.getString(2), rs.getDouble(3));
				myBankAccounts.add(ba);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return myBankAccounts;
	}

	/**	
	 * 	need a single flashcard back from the database?
	 * 		create a get Method and search by a unique field(column)
	 */
	@Override
	public static BankAccountJB getAccountBalanceById(int id) {
		BankAccountJB ba = null;
		try (Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);) {
			String sql = "SELECT * FROM bank_account WHERE users_id = " + id;
			Statement statement = conn.createStatement();
			ResultSet rs = statement.executeQuery(sql);

			if (rs.next()) {
				ba = new BankAccountJB(rs.getInt(1), rs.getString(2), rs.getDouble(3));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return ba;
	}

	@Override
	public int createAccount(Account ba) {
		// TODO Auto-generated method stub
		return 0;
	}
	
}
