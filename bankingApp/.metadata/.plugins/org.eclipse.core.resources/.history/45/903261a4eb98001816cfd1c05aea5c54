package com.banking.daoIMP;



import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import com.banking.dao.BankAccountDao;


public class AccountImpl implements BankAccountDao {

	private final static String USERNAME = "banking_db";
	private final static String PASSWORD = "p4ssw0rd";
	private final static String URL = "jdbc:oracle:thin:@blackcat.cob89bumroku.us-east-2.rds.amazonaws.com:1521:ORCL";

	
	/*
	 * why use a preparedStatement over a statement? 
	 * 	-poor readability of a statement
	 * 	"INSERT with variables of a statement: VALUES(' "+ fc.getFcQuestion() + ',' + fc.getFcAnswer() +"')";
	 * 		-statement can have SQL injections while preparedStatements prevents them better
	 * 		Why is that? ** QC question probably
	 * 		PreparedStatement precompiles the SQL string without the user input, looks for SQL Keywords
	 * 		will only ever execute those keywords regardless of what the user enters
	 * 
	 * 
	 */
	//CREATE
	@Override
	public int createFlashCard(FlashCard fc) {
		int rowsAffected = 0;
		try (Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);) {
			/*
			 * need to stop autocommit to run multiple sql statements asa single transaction?
			 */
			conn.setAutoCommit(false);
			String sql = "INSERT INTO flash_Cards(fc_question, fc_answer) VALUES(?,?)";
			//Statement statement = conn.createStatement(); notice that statement doesn't take a SQL argument while preparedStatement does
			PreparedStatement ps = conn.prepareStatement(sql);//take in the SQL statement without variable first, use ? instead
			//after setting your SQL we now need to register the parameters of the SQL Statement
			//however many ? you have, you need a ps.set method for each one
			ps.setString(1, fc.getFcQuestion());//what is the datatype of the 1st? that is String for the Question, and it is the 1st ?
			ps.setString(2, fc.getFcAnswer());//again 2 is the ? number, the 2nd argument is the value
			rowsAffected =  ps.executeUpdate();
			conn.commit(); //if you set autocommit(False) you must use the commit() on the connection
		} catch(SQLException e) {
			e.printStackTrace();
		return rowsAffected;
	}

	public List<FlashCard> getAllFlashCards() {
		try (Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);){
			String sql = "SELECT * FROM flash_Cards";// in lowercase to indicate its a table name
			Statement statement = conn.createStatement();
			ResultSet rs = statement.executeQuery(sql);

			System.out.println(rs);
			// loop through
			while (rs.next()) { // while you still have another record
				/*
				 * getInt (column index) or getInt(column label)
				 */
				/*
				 * rs.getInt(1) is the fc_id value, could be getInt("fc_id")
				 * rs.getString("fc_question) is the question value/getString(2)
				 * rs.getString("fc_answer") is the answer value
				 */
				FlashCard fc = new FlashCard(rs.getInt(1), rs.getString("fc_question"), rs.getString("fc_answer"));
				myFlashCards.add(fc);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return myFlashCards;
	}	}

	public void createFlashCardProc(FlashCard fc) {
		try(Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);){
			String sql = "{call insert fc_procedure(?,?,?)}";//surround in {}, it works but nothing gets returned
			String msg = "";
			CallableStatement cs = conn.prepareCall(sql);
			cs.setString(1,  fc.getFcQuestion());
			cs.setString(2, fc.getFcAnswer());
			cs.setString(3, msg);
			int rowsAffected = cs.executeUpdate();
			System.out.println("rows affected" + rowsAffected);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	@Override
	public FlashCard getFlashCardById(int id) {
		FlashCard fc = null;
		try (Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);){
			String sql = "SELECT * FROM flash_Cards WHERE fc_id = " + id;
			Statement statement = conn.createStatement(sql);
			ResultSet rs = statement.executeQuery(sql);
			
			if(rs.next()) {
				 fc = new FlashCard(rs.getInt("fc_id"), rs.getString(2), rs.getString("fc_answer"));
			}
		}
		catch(SQLException e) {
			e.printStackTrace();
		return fc;
		}
}

}
