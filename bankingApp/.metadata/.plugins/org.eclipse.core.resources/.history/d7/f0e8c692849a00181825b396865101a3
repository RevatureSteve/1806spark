package com.revature.service;

import com.revature.dao.UserDao;
import com.revature.dao.UserDaoImpl;
import com.revature.domain.User;

public class AppService {

	
	/*
	 * business logic like login validation
	 *  validate models before persisting, e.g. ensure that no one is overdrafting
	 *  manipulate models before persisting like subtract if they are withdrawing money
	 *  validate user before pulling sensitive data, not entering gibberish for username
	 *  etc...
	 */
	private UserDao userDao = new UserDaoImpl();
	
	/**
	 * login() returns a valid user object or returns null if the user/pw combo is invalid;
	 * @param userInput
	 * @return
	 */
	public User login(User userInput) {
		//return a valid user object or return null;
		//first pass the userInput's username to the dao 
		//to see if there is a record in the db with that username
		// if there is - assign the user record to a user java object
		// if not - then it is null
		User dbUser = userDao.getUserByUsername(userInput.getUsername());
		//since the username might not be found I could get null back ..check for that
		if(dbUser!=null) {
			//compare the userInput's password to the dbUser's password
			if(dbUser.getPassword().equals(userInput.getPassword()));
			return dbUser; //not userInput since it doesn't have user id
		}
		return null;
	}
}
