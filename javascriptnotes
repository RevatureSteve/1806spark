Notes for JavaScript

Not only in the browser

An interpreted language (not compiled) executed line by line.

file extension .js = JavaScript
if .js it will be app.js or main.js or hello.js, no matter what it will end in .js

Browsers/other progs will contain some type of JS Engine.
ex: Chrome - V8 JS Engine is OpenSource

equal sign "=" is sign operator

//note
JAVA IS A COMPILED language
.Java -> compiled > .class file
Java assumes other machines only understand machine code, so, it converts it to a machine language.

var = keywords with some function built into the language.

Datatypes:

When I want to take input from a user, I want to store that in a variable.
We 'declare' variables in JavaScript...

Var cat = (cat is the variable name) <--- declaration of a variable
if you ran this variable, it would likely just be undefined.
by default, in JS, it would be just undefined.

var cat;
cat = "cat"; <-- gives it a name
// if you were to 'print cat' it would display "cat"

cat = "dog";

// if i were to print cat, at this point...it would display "dog"

cat = 12; //number
// cats datatype changed from string to number (=12), you'd know its a number based on the fact that it is lacking quotations.
cat = "13"; //cat is string




" <insert txt> " <--- this is a string

Primitive Datatypes are most broken down form.

A person isn't a primitive Datatype, they would be an object.
they could have age
name - string
age - number
ssn - number / string
is Alive = true/false (this is a Boolean)

Datatypes in JS

primitive datatypes in JS:
Number
string
Boolean

Object (in JS is a key/value pair.
ex: color: red;
    key: value;




var person {
    name: "Tom",
    age: 37,
    isAlive: true
};

// print person <--- will print all the contents of Tom.


// document.getElementByID ("." <--- accessing a property of document)

print person.name
// Tom would print.

print "Is Tom alive_" + person.isAlive
}

person.age=42; // this would be an update to the code.




var cat = "cat"; (the ="cat" is the initialization)
