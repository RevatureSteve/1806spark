package com.revature.abstracts;

/*
 * this is just general information
 * Sandwich class is going to be a template for creating
 * subclasses for specific sandwiches.
 * We are going to make this class abstract
 */
/**
 * Abstract keyword can be used in 2 locations: - classes - methods no such
 * thing as an abstract variable (javadocs comment w 2 asterisks) these comments
 * directly above mean it provides insight into the topic at hand.
 * 
 * subclass examples: - club -dagwood -cuban
 */
public abstract class Sandwich {

	// State aka variables below

	private int slicesOfBread;
	private String[] meats;
	private String[] toppings;
	private String name;
	protected int size;
//	private boolean isToasted;
	// dont want to use cos cant guarantee all subclasses will use this

	// EVERY CLASS MUST HAVE A CONSTRUCTOR FROM THIS POINT ON.
	// no-args constructor, future frameworks will require this.

	//behaviors 
	// public void prepping(); THIS WONT WORK BECAUSE IT ISNT ABSTRACT, NEEDS A BODY.
	public abstract void prepping();
	
	
	// THIS IS OVERLOADING OF SANDWICH() AND SANDWICH(PARAMS)
	// OVERLOADING HAS TO OCCUR IN THE SAME CLASS.
	public Sandwich() {
	};
	
	
	
public Sandwich(int slicesOfBread, String[] meats, String[] toppings, String name, int size) {
		super();
		this.slicesOfBread = slicesOfBread;
		this.meats = meats;
		this.toppings = toppings;
		this.name = name;
		this.size = size;
	}



/**
 * takeBite() decrements sandwich size by 1
 * @return remaining size of sandwich
 * */
	public int takeBite() {
		//this. is not required but there is no other size variable in the parameter or the method
		// this. is ALWAYS in reference to the class-level.
		this.size--; 
		return this.size;
		
		
	}
	public int takeBite(int biteSize) {
		this.size -= biteSize; //same as this.size - biteSize; 
		return this.size;
		
		
	}
	
	
}
