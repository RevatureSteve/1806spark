package com.revature;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

import com.revature.beans.Student;

public class Driver {
	/*
	 * Serialization: Java Obj to Byte Code
	 * DeSerialization: Byte Code to Java Objs
	 * 
	 * First Note: All Java Objs are blacklisted,
	 * meaining you cannot do serialization.
	 * You must whitelist each individual class so
	 * that the object created from them are allowed
	 * to be serialized.
	 * 
	 * Serializable is a "Marker Interface"
	 * 		Marker Interfaces tells the JVM something special
	 * 		- different per-case.
	 * 		Marker Interfaces have no methods.
	 * 		The something special about Serializable is the whitelisting.
	 * 1. Class must implement Serializable (whitelist)
	 * 		2. Add a serialVersionUID
	 * 
	 */
	public static void main(String[] args) {
		
System.out.println("test1");
	
	//when you have files youre going to use, you would put these files
	// in a special package that you could easily find.
	// separating non-Java files into a "resources" folder.
	String filePathAndName = "src/com/revature/person.txt";
	
	// created the obj from a class marked as Serializable
	Student john = new Student(1,"John",4.0);
	
	serializeStudent(john, filePathAndName);
	}
	
	// to serialize a student, i will need student and filepath. THIS IS NOT SHADOWING.
	// I have two variables with same name, but, theyre not in the same scope.
public static void serializeStudent(Student stud, String filePathAndName) {
	// Serialize Student to a file.
	
	//the blank template of this only provides constructors to take arguments, cant take no args.
	
	//ObjectOutputStream is better than FileOutputStream.
		try( FileOutputStream os = new FileOutputStream(filePathAndName);
				// ill add an additional catch clause to my catch.
				ObjectOutputStream oos = new ObjectOutputStream(os);) {
			oos.writeObject(stud);
			
		} catch (FileNotFoundException e) {
			//WILL ONLY CATCH ITSELF.
			e.printStackTrace();
		} catch (IOException e1) {
			// IOEXCEPTION WILL CATCH ITSELF AND FILENOTFOUND
			e1.printStackTrace();
		} catch (Exception e2) {
			// EXCEPTION WILL CATCH IOEXCEPTION AND FILENOTFOUNDEXCEPTION
			
		}
		
	
}
}
